// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// CheckEmailDuplication mocks base method.
func (m *MockHandler) CheckEmailDuplication(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckEmailDuplication", c)
}

// CheckEmailDuplication indicates an expected call of CheckEmailDuplication.
func (mr *MockHandlerMockRecorder) CheckEmailDuplication(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailDuplication", reflect.TypeOf((*MockHandler)(nil).CheckEmailDuplication), c)
}

// CheckUserIDDuplication mocks base method.
func (m *MockHandler) CheckUserIDDuplication(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckUserIDDuplication", c)
}

// CheckUserIDDuplication indicates an expected call of CheckUserIDDuplication.
func (mr *MockHandlerMockRecorder) CheckUserIDDuplication(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIDDuplication", reflect.TypeOf((*MockHandler)(nil).CheckUserIDDuplication), c)
}

// CreateUser mocks base method.
func (m *MockHandler) CreateUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateUser", c)
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockHandlerMockRecorder) CreateUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockHandler)(nil).CreateUser), c)
}

// DeleteUser mocks base method.
func (m *MockHandler) DeleteUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUser", c)
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockHandlerMockRecorder) DeleteUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockHandler)(nil).DeleteUser), c)
}

// UpdateUser mocks base method.
func (m *MockHandler) UpdateUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUser", c)
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockHandlerMockRecorder) UpdateUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockHandler)(nil).UpdateUser), c)
}

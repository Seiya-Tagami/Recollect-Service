// Code generated by MockGen. DO NOT EDIT.
// Source: openai.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	entity "github.com/Seiya-Tagami/Recollect-Service/api/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockInteractor is a mock of Interactor interface.
type MockInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockInteractorMockRecorder
}

// MockInteractorMockRecorder is the mock recorder for MockInteractor.
type MockInteractorMockRecorder struct {
	mock *MockInteractor
}

// NewMockInteractor creates a new mock instance.
func NewMockInteractor(ctrl *gomock.Controller) *MockInteractor {
	mock := &MockInteractor{ctrl: ctrl}
	mock.recorder = &MockInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractor) EXPECT() *MockInteractorMockRecorder {
	return m.recorder
}

// CheckEmailDuplication mocks base method.
func (m *MockInteractor) CheckEmailDuplication(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmailDuplication", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmailDuplication indicates an expected call of CheckEmailDuplication.
func (mr *MockInteractorMockRecorder) CheckEmailDuplication(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailDuplication", reflect.TypeOf((*MockInteractor)(nil).CheckEmailDuplication), email)
}

// CheckUserIDDuplication mocks base method.
func (m *MockInteractor) CheckUserIDDuplication(userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIDDuplication", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserIDDuplication indicates an expected call of CheckUserIDDuplication.
func (mr *MockInteractorMockRecorder) CheckUserIDDuplication(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIDDuplication", reflect.TypeOf((*MockInteractor)(nil).CheckUserIDDuplication), userID)
}

// CreateUser mocks base method.
func (m *MockInteractor) CreateUser(user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockInteractorMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockInteractor)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockInteractor) DeleteUser(sub string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockInteractorMockRecorder) DeleteUser(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockInteractor)(nil).DeleteUser), sub)
}

// UpdateUser mocks base method.
func (m *MockInteractor) UpdateUser(user entity.User, sub string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user, sub)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockInteractorMockRecorder) UpdateUser(user, sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockInteractor)(nil).UpdateUser), user, sub)
}

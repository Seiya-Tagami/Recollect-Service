// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_card is a generated GoMock package.
package mock_card

import (
	reflect "reflect"

	entity "github.com/Seiya-Tagami/Recollect-Service/api/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BatchInsert mocks base method.
func (m *MockRepository) BatchInsert(cards *[]entity.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsert", cards)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchInsert indicates an expected call of BatchInsert.
func (mr *MockRepositoryMockRecorder) BatchInsert(cards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsert", reflect.TypeOf((*MockRepository)(nil).BatchInsert), cards)
}

// DeleteById mocks base method.
func (m *MockRepository) DeleteById(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockRepositoryMockRecorder) DeleteById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockRepository)(nil).DeleteById), id)
}

// Insert mocks base method.
func (m *MockRepository) Insert(card *entity.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", card)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder) Insert(card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), card)
}

// SelectAll mocks base method.
func (m *MockRepository) SelectAll(card *[]entity.Card, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll", card, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockRepositoryMockRecorder) SelectAll(card, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockRepository)(nil).SelectAll), card, userID)
}

// UpdateById mocks base method.
func (m *MockRepository) UpdateById(card *entity.Card, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", card, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockRepositoryMockRecorder) UpdateById(card, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockRepository)(nil).UpdateById), card, id)
}
